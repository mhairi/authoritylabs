{
    "collab_server" : "",
    "contents" : "\n#' Set Callback\n#'\n#' @param keyword Keyword we want to analysis\n#' @param callback_url Callback URL where we can get the results\n#' @param auth_token API Key\n#' @param locale  Locale for request, as defined in documenation\n#' @param mobile  Set to TRUE to get mobile results\n#'\n#' @return A list with the response\n#' @export\n#'\n#' @examples\n#'\n#' set_callback_authority_labs('capital one', 'http://mhairihmcneill.com/callback')\nset_callback_authority_labs <- function(keyword,\n                                        callback_url = 'http://mhairihmcneill.com/callback',\n                                        auth_token = 'LmJWkiGmVjQwA1JIIx3o',\n                                        locale     = 'en-uk',\n                                        mobile     =  FALSE){\n\n  parameters <- list(\n    'keyword'    = keyword,\n    'callback'   = callback_url,\n    'auth_token' = auth_token,\n    'locale'     = locale\n  )\n\n  if (mobile) parameters$mobile <- 'true'\n\n  url <- 'http://api.authoritylabs.com/keywords/priority'\n  r = httr::POST(url,\n             body = parameters,\n             encode = \"json\")\n\n  return(list(r = r, status_code = httr::status_code(r), content = httr::content(r)))\n}\n\n\n#' Get data, using callback url\n#'\n#' @param json_callback_url URL from callback\n#' @param auth_token API key\n#'\n#' @return A list containing the content of the response\n#' @export\n#'\n#' @examples\n#' raw_data <- get_authority_labs_data(\"http://api.authoritylabs.com/keywords/get.json?keyword=capital%20one&rank_date=2016-09-13&locale=en-uk&engine=google&pages_from=false&lang_only=false&geo=&autocorrect=&mobile=false&ppl_id=&papi_id=14738015579796\")\nget_authority_labs_data <- function(json_callback_url,\n                                    auth_token = 'LmJWkiGmVjQwA1JIIx3o'){\n\n  response <- httr::GET(json_callback_url, query = list(auth_token = auth_token))\n\n  httr::http_error(response)\n\n  return(httr::content(response))\n}\n\n\n### Parsing data helpers ###\n\n#' Extract URL Data\n#'\n#' Helper function - extract a variable from list data\n#'\n#' @param var a variable\n#' @param list_data a list\n#'\n#' @return A character vector\n#' @export\n#'\n#' @examples \\donotrun{\n#' extract_url_data(var, list_data)\n#' }\nextract_url_data <- function(var, list_data){\n  l <- purrr::map_chr(list_data, var)\n  l <- dplyr::na_if(l, 'NULL')\n  l <- dplyr::na_if(l, 'list()')\n  return(l)\n}\n\n#' Get URL variables\n#'\n#' Helper function for converting to data frame\n#'\n#' @param return_data\n#'\n#' @return Data Frame\n#' @export\n#'\n#' @importFrom dplyr %>%\n#'\n#' @examples \\donotrun{\n#' get_url_vars(return_data)\n#' }\nget_url_vars <- function(return_data){\n\n  all_url_vars <-\n  purrr::map(return_data$serp, names) %>%\n    purrr::reduce(union)\n\n  variables <-\n  purrr::map(all_url_vars,\n             purrr::possibly(extract_url_data, NULL),\n             return_data$serp)\n\n  df <- purrr::discard(variables, is.null)\n  df <- purrr::map(df, type.convert)\n  df <- purrr::map_if(df, is.factor, as.character)\n  df <- purrr::map(df, dplyr::data_frame)\n\n  df <- dplyr::bind_cols(df)\n\n  names(df) <- all_url_vars[purrr::map_lgl(variables, ~ !is.null(.x))]\n\n  return(df)\n}\n\n#' Convert list returned from authority\n#' labs to data frame\n#'\n#' @param return_data A list from `get_authority_labs_data`\n#'\n#' @return A dataframe with one row per url\n#' @export\n#'\n#' @importFrom dplyr %>%\n#'\n#' @examples\n#' raw_data <- get_authority_labs_data(\"http://api.authoritylabs.com/keywords/get.json?keyword=mhairi&rank_date=2016-09-13&locale=en-uk&engine=google&pages_from=false&lang_only=false&geo=&autocorrect=&mobile=false&ppl_id=&papi_id=14737953718458\")\n#' to_data_frame_authority_labs(raw_data)\nto_data_frame_authority_labs <- function(return_data){\n\n  df <- get_url_vars(return_data)\n\n  n_urls <- nrow(df)\n\n  keyword_vars <-\n    purrr::keep(return_data, ~ !is.list(.x) & length(.x) == 1) %>%\n    purrr::map(~ rep(.x, n_urls))\n\n  df <- dplyr::bind_cols(df, keyword_vars)\n\n  return(df)\n}\n\n#' Get account data\n#'\n#' @param account_id Account number\n#' @param auth_token API key\n#'\n#' @return List with response data\n#' @export\n#'\n#' @examples\n#' get_account_data()\nget_account_data <- function(account_id = '331', auth_token =  'LmJWkiGmVjQwA1JIIx3o'){\n  url <- paste0('https://api.authoritylabs.com/account/', account_id, '.json?auth_token=', auth_token)\n  r <- httr::GET(url)\n  httr::content(r)\n}\n\n#return_data <- get_authority_labs_data('http://api.authoritylabs.com/keywords/get.json?keyword=scottish%20salmon&rank_date=2016-08-05&locale=en-uk&engine=google&pages_from=false&lang_only=false&geo=&autocorrect=&mobile=false&ppl_id=&papi_id=57a4853adab89e4a07000009')\n#set_callback_authority_labs('scottish salmon', 'https://requestb.in/xvyd8axv', priority = TRUE)\n\n\n#\n# set_callback_authority_labs('scottish salmon', 'http://requestb.in/1a00l6u1', priority = TRUE)\n# return_data <- get_authority_labs_data('http://api.authoritylabs.com/keywords/get.json?keyword=scottish%20salmon&rank_date=2016-08-29&locale=en-uk&engine=google&pages_from=false&lang_only=false&geo=&autocorrect=&mobile=false&ppl_id=&papi_id=14724708816196')\n# df <- to_data_frame_authority_labs(return_data)\n#\n# readr::write_rds(df, 'scottish_salmon2.rds')\n\n",
    "created" : 1473773043227.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2743859075",
    "id" : "697DD789",
    "lastKnownWriteTime" : 1476183028,
    "last_content_update" : 1476183028851,
    "path" : "~/Documents/APIs/authoritylabs/R/authority_labs.R",
    "project_path" : "R/authority_labs.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}